// Generated by view binder compiler. Do not edit!
package com.godspeed.propmart.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.EditText;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.RelativeLayout;
import android.widget.Spinner;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.cardview.widget.CardView;
import androidx.recyclerview.widget.RecyclerView;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.godspeed.propmart.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ActivityEditPlotBinding implements ViewBinding {
  @NonNull
  private final RelativeLayout rootView;

  @NonNull
  public final TextView address;

  @NonNull
  public final TextView area;

  @NonNull
  public final TextView availablePlots;

  @NonNull
  public final ImageView backButton;

  @NonNull
  public final TextView cancel;

  @NonNull
  public final TextView cancelPlot;

  @NonNull
  public final TextView description;

  @NonNull
  public final TextView dimensions;

  @NonNull
  public final EditText district;

  @NonNull
  public final RecyclerView documentRv;

  @NonNull
  public final CardView editDetailsPopup;

  @NonNull
  public final LinearLayout editPlotDetails;

  @NonNull
  public final LinearLayout editScheme;

  @NonNull
  public final CardView editSchemePopup;

  @NonNull
  public final EditText editTextAddress;

  @NonNull
  public final EditText editTextDescription;

  @NonNull
  public final EditText editTextDimensions;

  @NonNull
  public final EditText editTextTaluka;

  @NonNull
  public final EditText editTextVillage;

  @NonNull
  public final ImageView layoutMap;

  @NonNull
  public final TextView oName;

  @NonNull
  public final EditText ownerName;

  @NonNull
  public final Spinner plotSpinner;

  @NonNull
  public final TextView rate;

  @NonNull
  public final TextView save;

  @NonNull
  public final TextView savePlot;

  @NonNull
  public final TextView sellerName;

  @NonNull
  public final TextView soldPlots;

  @NonNull
  public final Spinner subPropr;

  @NonNull
  public final TextView textView13;

  @NonNull
  public final TextView textView14;

  @NonNull
  public final TextView textView16;

  @NonNull
  public final TextView textView17;

  @NonNull
  public final TextView textView19;

  @NonNull
  public final TextView title;

  @NonNull
  public final LinearLayout toolbar;

  @NonNull
  public final TextView toolbarTitle;

  @NonNull
  public final EditText totalArea;

  @NonNull
  public final TextView totalPlots;

  @NonNull
  public final LinearLayout upload;

  private ActivityEditPlotBinding(@NonNull RelativeLayout rootView, @NonNull TextView address,
      @NonNull TextView area, @NonNull TextView availablePlots, @NonNull ImageView backButton,
      @NonNull TextView cancel, @NonNull TextView cancelPlot, @NonNull TextView description,
      @NonNull TextView dimensions, @NonNull EditText district, @NonNull RecyclerView documentRv,
      @NonNull CardView editDetailsPopup, @NonNull LinearLayout editPlotDetails,
      @NonNull LinearLayout editScheme, @NonNull CardView editSchemePopup,
      @NonNull EditText editTextAddress, @NonNull EditText editTextDescription,
      @NonNull EditText editTextDimensions, @NonNull EditText editTextTaluka,
      @NonNull EditText editTextVillage, @NonNull ImageView layoutMap, @NonNull TextView oName,
      @NonNull EditText ownerName, @NonNull Spinner plotSpinner, @NonNull TextView rate,
      @NonNull TextView save, @NonNull TextView savePlot, @NonNull TextView sellerName,
      @NonNull TextView soldPlots, @NonNull Spinner subPropr, @NonNull TextView textView13,
      @NonNull TextView textView14, @NonNull TextView textView16, @NonNull TextView textView17,
      @NonNull TextView textView19, @NonNull TextView title, @NonNull LinearLayout toolbar,
      @NonNull TextView toolbarTitle, @NonNull EditText totalArea, @NonNull TextView totalPlots,
      @NonNull LinearLayout upload) {
    this.rootView = rootView;
    this.address = address;
    this.area = area;
    this.availablePlots = availablePlots;
    this.backButton = backButton;
    this.cancel = cancel;
    this.cancelPlot = cancelPlot;
    this.description = description;
    this.dimensions = dimensions;
    this.district = district;
    this.documentRv = documentRv;
    this.editDetailsPopup = editDetailsPopup;
    this.editPlotDetails = editPlotDetails;
    this.editScheme = editScheme;
    this.editSchemePopup = editSchemePopup;
    this.editTextAddress = editTextAddress;
    this.editTextDescription = editTextDescription;
    this.editTextDimensions = editTextDimensions;
    this.editTextTaluka = editTextTaluka;
    this.editTextVillage = editTextVillage;
    this.layoutMap = layoutMap;
    this.oName = oName;
    this.ownerName = ownerName;
    this.plotSpinner = plotSpinner;
    this.rate = rate;
    this.save = save;
    this.savePlot = savePlot;
    this.sellerName = sellerName;
    this.soldPlots = soldPlots;
    this.subPropr = subPropr;
    this.textView13 = textView13;
    this.textView14 = textView14;
    this.textView16 = textView16;
    this.textView17 = textView17;
    this.textView19 = textView19;
    this.title = title;
    this.toolbar = toolbar;
    this.toolbarTitle = toolbarTitle;
    this.totalArea = totalArea;
    this.totalPlots = totalPlots;
    this.upload = upload;
  }

  @Override
  @NonNull
  public RelativeLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivityEditPlotBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivityEditPlotBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_edit_plot, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivityEditPlotBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.address;
      TextView address = ViewBindings.findChildViewById(rootView, id);
      if (address == null) {
        break missingId;
      }

      id = R.id.area;
      TextView area = ViewBindings.findChildViewById(rootView, id);
      if (area == null) {
        break missingId;
      }

      id = R.id.availablePlots;
      TextView availablePlots = ViewBindings.findChildViewById(rootView, id);
      if (availablePlots == null) {
        break missingId;
      }

      id = R.id.back_button;
      ImageView backButton = ViewBindings.findChildViewById(rootView, id);
      if (backButton == null) {
        break missingId;
      }

      id = R.id.cancel;
      TextView cancel = ViewBindings.findChildViewById(rootView, id);
      if (cancel == null) {
        break missingId;
      }

      id = R.id.cancelPlot;
      TextView cancelPlot = ViewBindings.findChildViewById(rootView, id);
      if (cancelPlot == null) {
        break missingId;
      }

      id = R.id.description;
      TextView description = ViewBindings.findChildViewById(rootView, id);
      if (description == null) {
        break missingId;
      }

      id = R.id.dimensions;
      TextView dimensions = ViewBindings.findChildViewById(rootView, id);
      if (dimensions == null) {
        break missingId;
      }

      id = R.id.district;
      EditText district = ViewBindings.findChildViewById(rootView, id);
      if (district == null) {
        break missingId;
      }

      id = R.id.document_rv;
      RecyclerView documentRv = ViewBindings.findChildViewById(rootView, id);
      if (documentRv == null) {
        break missingId;
      }

      id = R.id.edit_details_popup;
      CardView editDetailsPopup = ViewBindings.findChildViewById(rootView, id);
      if (editDetailsPopup == null) {
        break missingId;
      }

      id = R.id.edit_plot_details;
      LinearLayout editPlotDetails = ViewBindings.findChildViewById(rootView, id);
      if (editPlotDetails == null) {
        break missingId;
      }

      id = R.id.edit_scheme;
      LinearLayout editScheme = ViewBindings.findChildViewById(rootView, id);
      if (editScheme == null) {
        break missingId;
      }

      id = R.id.edit_scheme_popup;
      CardView editSchemePopup = ViewBindings.findChildViewById(rootView, id);
      if (editSchemePopup == null) {
        break missingId;
      }

      id = R.id.editTextAddress;
      EditText editTextAddress = ViewBindings.findChildViewById(rootView, id);
      if (editTextAddress == null) {
        break missingId;
      }

      id = R.id.editTextDescription;
      EditText editTextDescription = ViewBindings.findChildViewById(rootView, id);
      if (editTextDescription == null) {
        break missingId;
      }

      id = R.id.editTextDimensions;
      EditText editTextDimensions = ViewBindings.findChildViewById(rootView, id);
      if (editTextDimensions == null) {
        break missingId;
      }

      id = R.id.editTextTaluka;
      EditText editTextTaluka = ViewBindings.findChildViewById(rootView, id);
      if (editTextTaluka == null) {
        break missingId;
      }

      id = R.id.editTextVillage;
      EditText editTextVillage = ViewBindings.findChildViewById(rootView, id);
      if (editTextVillage == null) {
        break missingId;
      }

      id = R.id.layout_map;
      ImageView layoutMap = ViewBindings.findChildViewById(rootView, id);
      if (layoutMap == null) {
        break missingId;
      }

      id = R.id.oName;
      TextView oName = ViewBindings.findChildViewById(rootView, id);
      if (oName == null) {
        break missingId;
      }

      id = R.id.ownerName;
      EditText ownerName = ViewBindings.findChildViewById(rootView, id);
      if (ownerName == null) {
        break missingId;
      }

      id = R.id.plotSpinner;
      Spinner plotSpinner = ViewBindings.findChildViewById(rootView, id);
      if (plotSpinner == null) {
        break missingId;
      }

      id = R.id.rate;
      TextView rate = ViewBindings.findChildViewById(rootView, id);
      if (rate == null) {
        break missingId;
      }

      id = R.id.save;
      TextView save = ViewBindings.findChildViewById(rootView, id);
      if (save == null) {
        break missingId;
      }

      id = R.id.savePlot;
      TextView savePlot = ViewBindings.findChildViewById(rootView, id);
      if (savePlot == null) {
        break missingId;
      }

      id = R.id.seller_name;
      TextView sellerName = ViewBindings.findChildViewById(rootView, id);
      if (sellerName == null) {
        break missingId;
      }

      id = R.id.sold_plots;
      TextView soldPlots = ViewBindings.findChildViewById(rootView, id);
      if (soldPlots == null) {
        break missingId;
      }

      id = R.id.subPropr;
      Spinner subPropr = ViewBindings.findChildViewById(rootView, id);
      if (subPropr == null) {
        break missingId;
      }

      id = R.id.textView13;
      TextView textView13 = ViewBindings.findChildViewById(rootView, id);
      if (textView13 == null) {
        break missingId;
      }

      id = R.id.textView14;
      TextView textView14 = ViewBindings.findChildViewById(rootView, id);
      if (textView14 == null) {
        break missingId;
      }

      id = R.id.textView16;
      TextView textView16 = ViewBindings.findChildViewById(rootView, id);
      if (textView16 == null) {
        break missingId;
      }

      id = R.id.textView17;
      TextView textView17 = ViewBindings.findChildViewById(rootView, id);
      if (textView17 == null) {
        break missingId;
      }

      id = R.id.textView19;
      TextView textView19 = ViewBindings.findChildViewById(rootView, id);
      if (textView19 == null) {
        break missingId;
      }

      id = R.id.title;
      TextView title = ViewBindings.findChildViewById(rootView, id);
      if (title == null) {
        break missingId;
      }

      id = R.id.toolbar;
      LinearLayout toolbar = ViewBindings.findChildViewById(rootView, id);
      if (toolbar == null) {
        break missingId;
      }

      id = R.id.toolbar_title;
      TextView toolbarTitle = ViewBindings.findChildViewById(rootView, id);
      if (toolbarTitle == null) {
        break missingId;
      }

      id = R.id.totalArea;
      EditText totalArea = ViewBindings.findChildViewById(rootView, id);
      if (totalArea == null) {
        break missingId;
      }

      id = R.id.totalPlots;
      TextView totalPlots = ViewBindings.findChildViewById(rootView, id);
      if (totalPlots == null) {
        break missingId;
      }

      id = R.id.upload;
      LinearLayout upload = ViewBindings.findChildViewById(rootView, id);
      if (upload == null) {
        break missingId;
      }

      return new ActivityEditPlotBinding((RelativeLayout) rootView, address, area, availablePlots,
          backButton, cancel, cancelPlot, description, dimensions, district, documentRv,
          editDetailsPopup, editPlotDetails, editScheme, editSchemePopup, editTextAddress,
          editTextDescription, editTextDimensions, editTextTaluka, editTextVillage, layoutMap,
          oName, ownerName, plotSpinner, rate, save, savePlot, sellerName, soldPlots, subPropr,
          textView13, textView14, textView16, textView17, textView19, title, toolbar, toolbarTitle,
          totalArea, totalPlots, upload);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
